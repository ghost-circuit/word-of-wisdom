// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: wisdom.proto

package wisdom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WordOfWisdomService_GetChallenge_FullMethodName   = "/wisdom.WordOfWisdomService/GetChallenge"
	WordOfWisdomService_SubmitSolution_FullMethodName = "/wisdom.WordOfWisdomService/SubmitSolution"
)

// WordOfWisdomServiceClient is the client API for WordOfWisdomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WordOfWisdomService implements a challenge-response protocol where the server dynamically
// provides a challenge, and the client must solve it to get the word of wisdom.
type WordOfWisdomServiceClient interface {
	// Request a challenge that the client must solve.
	GetChallenge(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChallengeResponse, error)
	// Submit a solution to the given challenge.
	SubmitSolution(ctx context.Context, in *SolutionRequest, opts ...grpc.CallOption) (*SolutionResponse, error)
}

type wordOfWisdomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordOfWisdomServiceClient(cc grpc.ClientConnInterface) WordOfWisdomServiceClient {
	return &wordOfWisdomServiceClient{cc}
}

func (c *wordOfWisdomServiceClient) GetChallenge(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, WordOfWisdomService_GetChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordOfWisdomServiceClient) SubmitSolution(ctx context.Context, in *SolutionRequest, opts ...grpc.CallOption) (*SolutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SolutionResponse)
	err := c.cc.Invoke(ctx, WordOfWisdomService_SubmitSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordOfWisdomServiceServer is the server API for WordOfWisdomService service.
// All implementations must embed UnimplementedWordOfWisdomServiceServer
// for forward compatibility.
//
// WordOfWisdomService implements a challenge-response protocol where the server dynamically
// provides a challenge, and the client must solve it to get the word of wisdom.
type WordOfWisdomServiceServer interface {
	// Request a challenge that the client must solve.
	GetChallenge(context.Context, *emptypb.Empty) (*ChallengeResponse, error)
	// Submit a solution to the given challenge.
	SubmitSolution(context.Context, *SolutionRequest) (*SolutionResponse, error)
	mustEmbedUnimplementedWordOfWisdomServiceServer()
}

// UnimplementedWordOfWisdomServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWordOfWisdomServiceServer struct{}

func (UnimplementedWordOfWisdomServiceServer) GetChallenge(context.Context, *emptypb.Empty) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallenge not implemented")
}
func (UnimplementedWordOfWisdomServiceServer) SubmitSolution(context.Context, *SolutionRequest) (*SolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitSolution not implemented")
}
func (UnimplementedWordOfWisdomServiceServer) mustEmbedUnimplementedWordOfWisdomServiceServer() {}
func (UnimplementedWordOfWisdomServiceServer) testEmbeddedByValue()                             {}

// UnsafeWordOfWisdomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordOfWisdomServiceServer will
// result in compilation errors.
type UnsafeWordOfWisdomServiceServer interface {
	mustEmbedUnimplementedWordOfWisdomServiceServer()
}

func RegisterWordOfWisdomServiceServer(s grpc.ServiceRegistrar, srv WordOfWisdomServiceServer) {
	// If the following call pancis, it indicates UnimplementedWordOfWisdomServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WordOfWisdomService_ServiceDesc, srv)
}

func _WordOfWisdomService_GetChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordOfWisdomServiceServer).GetChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordOfWisdomService_GetChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordOfWisdomServiceServer).GetChallenge(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordOfWisdomService_SubmitSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordOfWisdomServiceServer).SubmitSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordOfWisdomService_SubmitSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordOfWisdomServiceServer).SubmitSolution(ctx, req.(*SolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WordOfWisdomService_ServiceDesc is the grpc.ServiceDesc for WordOfWisdomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordOfWisdomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wisdom.WordOfWisdomService",
	HandlerType: (*WordOfWisdomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallenge",
			Handler:    _WordOfWisdomService_GetChallenge_Handler,
		},
		{
			MethodName: "SubmitSolution",
			Handler:    _WordOfWisdomService_SubmitSolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wisdom.proto",
}
