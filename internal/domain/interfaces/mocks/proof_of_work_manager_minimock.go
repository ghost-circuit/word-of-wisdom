// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/alisher-baizhumanov/word-of-wisdom/internal/domain/interfaces.ProofOfWorkManager -o proof_of_work_manager_minimock.go -n ProofOfWorkManagerMock -p mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProofOfWorkManagerMock implements mm_interfaces.ProofOfWorkManager
type ProofOfWorkManagerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerateChallenge          func() (ba1 []byte, u1 uint8, err error)
	funcGenerateChallengeOrigin    string
	inspectFuncGenerateChallenge   func()
	afterGenerateChallengeCounter  uint64
	beforeGenerateChallengeCounter uint64
	GenerateChallengeMock          mProofOfWorkManagerMockGenerateChallenge

	funcValidateSolution          func(challenge []byte, nonce []byte) (b1 bool)
	funcValidateSolutionOrigin    string
	inspectFuncValidateSolution   func(challenge []byte, nonce []byte)
	afterValidateSolutionCounter  uint64
	beforeValidateSolutionCounter uint64
	ValidateSolutionMock          mProofOfWorkManagerMockValidateSolution
}

// NewProofOfWorkManagerMock returns a mock for mm_interfaces.ProofOfWorkManager
func NewProofOfWorkManagerMock(t minimock.Tester) *ProofOfWorkManagerMock {
	m := &ProofOfWorkManagerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateChallengeMock = mProofOfWorkManagerMockGenerateChallenge{mock: m}

	m.ValidateSolutionMock = mProofOfWorkManagerMockValidateSolution{mock: m}
	m.ValidateSolutionMock.callArgs = []*ProofOfWorkManagerMockValidateSolutionParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProofOfWorkManagerMockGenerateChallenge struct {
	optional           bool
	mock               *ProofOfWorkManagerMock
	defaultExpectation *ProofOfWorkManagerMockGenerateChallengeExpectation
	expectations       []*ProofOfWorkManagerMockGenerateChallengeExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProofOfWorkManagerMockGenerateChallengeExpectation specifies expectation struct of the ProofOfWorkManager.GenerateChallenge
type ProofOfWorkManagerMockGenerateChallengeExpectation struct {
	mock *ProofOfWorkManagerMock

	results      *ProofOfWorkManagerMockGenerateChallengeResults
	returnOrigin string
	Counter      uint64
}

// ProofOfWorkManagerMockGenerateChallengeResults contains results of the ProofOfWorkManager.GenerateChallenge
type ProofOfWorkManagerMockGenerateChallengeResults struct {
	ba1 []byte
	u1  uint8
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Optional() *mProofOfWorkManagerMockGenerateChallenge {
	mmGenerateChallenge.optional = true
	return mmGenerateChallenge
}

// Expect sets up expected params for ProofOfWorkManager.GenerateChallenge
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Expect() *mProofOfWorkManagerMockGenerateChallenge {
	if mmGenerateChallenge.mock.funcGenerateChallenge != nil {
		mmGenerateChallenge.mock.t.Fatalf("ProofOfWorkManagerMock.GenerateChallenge mock is already set by Set")
	}

	if mmGenerateChallenge.defaultExpectation == nil {
		mmGenerateChallenge.defaultExpectation = &ProofOfWorkManagerMockGenerateChallengeExpectation{}
	}

	return mmGenerateChallenge
}

// Inspect accepts an inspector function that has same arguments as the ProofOfWorkManager.GenerateChallenge
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Inspect(f func()) *mProofOfWorkManagerMockGenerateChallenge {
	if mmGenerateChallenge.mock.inspectFuncGenerateChallenge != nil {
		mmGenerateChallenge.mock.t.Fatalf("Inspect function is already set for ProofOfWorkManagerMock.GenerateChallenge")
	}

	mmGenerateChallenge.mock.inspectFuncGenerateChallenge = f

	return mmGenerateChallenge
}

// Return sets up results that will be returned by ProofOfWorkManager.GenerateChallenge
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Return(ba1 []byte, u1 uint8, err error) *ProofOfWorkManagerMock {
	if mmGenerateChallenge.mock.funcGenerateChallenge != nil {
		mmGenerateChallenge.mock.t.Fatalf("ProofOfWorkManagerMock.GenerateChallenge mock is already set by Set")
	}

	if mmGenerateChallenge.defaultExpectation == nil {
		mmGenerateChallenge.defaultExpectation = &ProofOfWorkManagerMockGenerateChallengeExpectation{mock: mmGenerateChallenge.mock}
	}
	mmGenerateChallenge.defaultExpectation.results = &ProofOfWorkManagerMockGenerateChallengeResults{ba1, u1, err}
	mmGenerateChallenge.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateChallenge.mock
}

// Set uses given function f to mock the ProofOfWorkManager.GenerateChallenge method
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Set(f func() (ba1 []byte, u1 uint8, err error)) *ProofOfWorkManagerMock {
	if mmGenerateChallenge.defaultExpectation != nil {
		mmGenerateChallenge.mock.t.Fatalf("Default expectation is already set for the ProofOfWorkManager.GenerateChallenge method")
	}

	if len(mmGenerateChallenge.expectations) > 0 {
		mmGenerateChallenge.mock.t.Fatalf("Some expectations are already set for the ProofOfWorkManager.GenerateChallenge method")
	}

	mmGenerateChallenge.mock.funcGenerateChallenge = f
	mmGenerateChallenge.mock.funcGenerateChallengeOrigin = minimock.CallerInfo(1)
	return mmGenerateChallenge.mock
}

// Times sets number of times ProofOfWorkManager.GenerateChallenge should be invoked
func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) Times(n uint64) *mProofOfWorkManagerMockGenerateChallenge {
	if n == 0 {
		mmGenerateChallenge.mock.t.Fatalf("Times of ProofOfWorkManagerMock.GenerateChallenge mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateChallenge.expectedInvocations, n)
	mmGenerateChallenge.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateChallenge
}

func (mmGenerateChallenge *mProofOfWorkManagerMockGenerateChallenge) invocationsDone() bool {
	if len(mmGenerateChallenge.expectations) == 0 && mmGenerateChallenge.defaultExpectation == nil && mmGenerateChallenge.mock.funcGenerateChallenge == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateChallenge.mock.afterGenerateChallengeCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateChallenge.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateChallenge implements mm_interfaces.ProofOfWorkManager
func (mmGenerateChallenge *ProofOfWorkManagerMock) GenerateChallenge() (ba1 []byte, u1 uint8, err error) {
	mm_atomic.AddUint64(&mmGenerateChallenge.beforeGenerateChallengeCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateChallenge.afterGenerateChallengeCounter, 1)

	mmGenerateChallenge.t.Helper()

	if mmGenerateChallenge.inspectFuncGenerateChallenge != nil {
		mmGenerateChallenge.inspectFuncGenerateChallenge()
	}

	if mmGenerateChallenge.GenerateChallengeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateChallenge.GenerateChallengeMock.defaultExpectation.Counter, 1)

		mm_results := mmGenerateChallenge.GenerateChallengeMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateChallenge.t.Fatal("No results are set for the ProofOfWorkManagerMock.GenerateChallenge")
		}
		return (*mm_results).ba1, (*mm_results).u1, (*mm_results).err
	}
	if mmGenerateChallenge.funcGenerateChallenge != nil {
		return mmGenerateChallenge.funcGenerateChallenge()
	}
	mmGenerateChallenge.t.Fatalf("Unexpected call to ProofOfWorkManagerMock.GenerateChallenge.")
	return
}

// GenerateChallengeAfterCounter returns a count of finished ProofOfWorkManagerMock.GenerateChallenge invocations
func (mmGenerateChallenge *ProofOfWorkManagerMock) GenerateChallengeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateChallenge.afterGenerateChallengeCounter)
}

// GenerateChallengeBeforeCounter returns a count of ProofOfWorkManagerMock.GenerateChallenge invocations
func (mmGenerateChallenge *ProofOfWorkManagerMock) GenerateChallengeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateChallenge.beforeGenerateChallengeCounter)
}

// MinimockGenerateChallengeDone returns true if the count of the GenerateChallenge invocations corresponds
// the number of defined expectations
func (m *ProofOfWorkManagerMock) MinimockGenerateChallengeDone() bool {
	if m.GenerateChallengeMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateChallengeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateChallengeMock.invocationsDone()
}

// MinimockGenerateChallengeInspect logs each unmet expectation
func (m *ProofOfWorkManagerMock) MinimockGenerateChallengeInspect() {
	for _, e := range m.GenerateChallengeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ProofOfWorkManagerMock.GenerateChallenge")
		}
	}

	afterGenerateChallengeCounter := mm_atomic.LoadUint64(&m.afterGenerateChallengeCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateChallengeMock.defaultExpectation != nil && afterGenerateChallengeCounter < 1 {
		m.t.Errorf("Expected call to ProofOfWorkManagerMock.GenerateChallenge at\n%s", m.GenerateChallengeMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateChallenge != nil && afterGenerateChallengeCounter < 1 {
		m.t.Errorf("Expected call to ProofOfWorkManagerMock.GenerateChallenge at\n%s", m.funcGenerateChallengeOrigin)
	}

	if !m.GenerateChallengeMock.invocationsDone() && afterGenerateChallengeCounter > 0 {
		m.t.Errorf("Expected %d calls to ProofOfWorkManagerMock.GenerateChallenge at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateChallengeMock.expectedInvocations), m.GenerateChallengeMock.expectedInvocationsOrigin, afterGenerateChallengeCounter)
	}
}

type mProofOfWorkManagerMockValidateSolution struct {
	optional           bool
	mock               *ProofOfWorkManagerMock
	defaultExpectation *ProofOfWorkManagerMockValidateSolutionExpectation
	expectations       []*ProofOfWorkManagerMockValidateSolutionExpectation

	callArgs []*ProofOfWorkManagerMockValidateSolutionParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProofOfWorkManagerMockValidateSolutionExpectation specifies expectation struct of the ProofOfWorkManager.ValidateSolution
type ProofOfWorkManagerMockValidateSolutionExpectation struct {
	mock               *ProofOfWorkManagerMock
	params             *ProofOfWorkManagerMockValidateSolutionParams
	paramPtrs          *ProofOfWorkManagerMockValidateSolutionParamPtrs
	expectationOrigins ProofOfWorkManagerMockValidateSolutionExpectationOrigins
	results            *ProofOfWorkManagerMockValidateSolutionResults
	returnOrigin       string
	Counter            uint64
}

// ProofOfWorkManagerMockValidateSolutionParams contains parameters of the ProofOfWorkManager.ValidateSolution
type ProofOfWorkManagerMockValidateSolutionParams struct {
	challenge []byte
	nonce     []byte
}

// ProofOfWorkManagerMockValidateSolutionParamPtrs contains pointers to parameters of the ProofOfWorkManager.ValidateSolution
type ProofOfWorkManagerMockValidateSolutionParamPtrs struct {
	challenge *[]byte
	nonce     *[]byte
}

// ProofOfWorkManagerMockValidateSolutionResults contains results of the ProofOfWorkManager.ValidateSolution
type ProofOfWorkManagerMockValidateSolutionResults struct {
	b1 bool
}

// ProofOfWorkManagerMockValidateSolutionOrigins contains origins of expectations of the ProofOfWorkManager.ValidateSolution
type ProofOfWorkManagerMockValidateSolutionExpectationOrigins struct {
	origin          string
	originChallenge string
	originNonce     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Optional() *mProofOfWorkManagerMockValidateSolution {
	mmValidateSolution.optional = true
	return mmValidateSolution
}

// Expect sets up expected params for ProofOfWorkManager.ValidateSolution
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Expect(challenge []byte, nonce []byte) *mProofOfWorkManagerMockValidateSolution {
	if mmValidateSolution.mock.funcValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Set")
	}

	if mmValidateSolution.defaultExpectation == nil {
		mmValidateSolution.defaultExpectation = &ProofOfWorkManagerMockValidateSolutionExpectation{}
	}

	if mmValidateSolution.defaultExpectation.paramPtrs != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by ExpectParams functions")
	}

	mmValidateSolution.defaultExpectation.params = &ProofOfWorkManagerMockValidateSolutionParams{challenge, nonce}
	mmValidateSolution.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateSolution.expectations {
		if minimock.Equal(e.params, mmValidateSolution.defaultExpectation.params) {
			mmValidateSolution.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateSolution.defaultExpectation.params)
		}
	}

	return mmValidateSolution
}

// ExpectChallengeParam1 sets up expected param challenge for ProofOfWorkManager.ValidateSolution
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) ExpectChallengeParam1(challenge []byte) *mProofOfWorkManagerMockValidateSolution {
	if mmValidateSolution.mock.funcValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Set")
	}

	if mmValidateSolution.defaultExpectation == nil {
		mmValidateSolution.defaultExpectation = &ProofOfWorkManagerMockValidateSolutionExpectation{}
	}

	if mmValidateSolution.defaultExpectation.params != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Expect")
	}

	if mmValidateSolution.defaultExpectation.paramPtrs == nil {
		mmValidateSolution.defaultExpectation.paramPtrs = &ProofOfWorkManagerMockValidateSolutionParamPtrs{}
	}
	mmValidateSolution.defaultExpectation.paramPtrs.challenge = &challenge
	mmValidateSolution.defaultExpectation.expectationOrigins.originChallenge = minimock.CallerInfo(1)

	return mmValidateSolution
}

// ExpectNonceParam2 sets up expected param nonce for ProofOfWorkManager.ValidateSolution
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) ExpectNonceParam2(nonce []byte) *mProofOfWorkManagerMockValidateSolution {
	if mmValidateSolution.mock.funcValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Set")
	}

	if mmValidateSolution.defaultExpectation == nil {
		mmValidateSolution.defaultExpectation = &ProofOfWorkManagerMockValidateSolutionExpectation{}
	}

	if mmValidateSolution.defaultExpectation.params != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Expect")
	}

	if mmValidateSolution.defaultExpectation.paramPtrs == nil {
		mmValidateSolution.defaultExpectation.paramPtrs = &ProofOfWorkManagerMockValidateSolutionParamPtrs{}
	}
	mmValidateSolution.defaultExpectation.paramPtrs.nonce = &nonce
	mmValidateSolution.defaultExpectation.expectationOrigins.originNonce = minimock.CallerInfo(1)

	return mmValidateSolution
}

// Inspect accepts an inspector function that has same arguments as the ProofOfWorkManager.ValidateSolution
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Inspect(f func(challenge []byte, nonce []byte)) *mProofOfWorkManagerMockValidateSolution {
	if mmValidateSolution.mock.inspectFuncValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("Inspect function is already set for ProofOfWorkManagerMock.ValidateSolution")
	}

	mmValidateSolution.mock.inspectFuncValidateSolution = f

	return mmValidateSolution
}

// Return sets up results that will be returned by ProofOfWorkManager.ValidateSolution
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Return(b1 bool) *ProofOfWorkManagerMock {
	if mmValidateSolution.mock.funcValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Set")
	}

	if mmValidateSolution.defaultExpectation == nil {
		mmValidateSolution.defaultExpectation = &ProofOfWorkManagerMockValidateSolutionExpectation{mock: mmValidateSolution.mock}
	}
	mmValidateSolution.defaultExpectation.results = &ProofOfWorkManagerMockValidateSolutionResults{b1}
	mmValidateSolution.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateSolution.mock
}

// Set uses given function f to mock the ProofOfWorkManager.ValidateSolution method
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Set(f func(challenge []byte, nonce []byte) (b1 bool)) *ProofOfWorkManagerMock {
	if mmValidateSolution.defaultExpectation != nil {
		mmValidateSolution.mock.t.Fatalf("Default expectation is already set for the ProofOfWorkManager.ValidateSolution method")
	}

	if len(mmValidateSolution.expectations) > 0 {
		mmValidateSolution.mock.t.Fatalf("Some expectations are already set for the ProofOfWorkManager.ValidateSolution method")
	}

	mmValidateSolution.mock.funcValidateSolution = f
	mmValidateSolution.mock.funcValidateSolutionOrigin = minimock.CallerInfo(1)
	return mmValidateSolution.mock
}

// When sets expectation for the ProofOfWorkManager.ValidateSolution which will trigger the result defined by the following
// Then helper
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) When(challenge []byte, nonce []byte) *ProofOfWorkManagerMockValidateSolutionExpectation {
	if mmValidateSolution.mock.funcValidateSolution != nil {
		mmValidateSolution.mock.t.Fatalf("ProofOfWorkManagerMock.ValidateSolution mock is already set by Set")
	}

	expectation := &ProofOfWorkManagerMockValidateSolutionExpectation{
		mock:               mmValidateSolution.mock,
		params:             &ProofOfWorkManagerMockValidateSolutionParams{challenge, nonce},
		expectationOrigins: ProofOfWorkManagerMockValidateSolutionExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateSolution.expectations = append(mmValidateSolution.expectations, expectation)
	return expectation
}

// Then sets up ProofOfWorkManager.ValidateSolution return parameters for the expectation previously defined by the When method
func (e *ProofOfWorkManagerMockValidateSolutionExpectation) Then(b1 bool) *ProofOfWorkManagerMock {
	e.results = &ProofOfWorkManagerMockValidateSolutionResults{b1}
	return e.mock
}

// Times sets number of times ProofOfWorkManager.ValidateSolution should be invoked
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Times(n uint64) *mProofOfWorkManagerMockValidateSolution {
	if n == 0 {
		mmValidateSolution.mock.t.Fatalf("Times of ProofOfWorkManagerMock.ValidateSolution mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateSolution.expectedInvocations, n)
	mmValidateSolution.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateSolution
}

func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) invocationsDone() bool {
	if len(mmValidateSolution.expectations) == 0 && mmValidateSolution.defaultExpectation == nil && mmValidateSolution.mock.funcValidateSolution == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateSolution.mock.afterValidateSolutionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateSolution.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateSolution implements mm_interfaces.ProofOfWorkManager
func (mmValidateSolution *ProofOfWorkManagerMock) ValidateSolution(challenge []byte, nonce []byte) (b1 bool) {
	mm_atomic.AddUint64(&mmValidateSolution.beforeValidateSolutionCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateSolution.afterValidateSolutionCounter, 1)

	mmValidateSolution.t.Helper()

	if mmValidateSolution.inspectFuncValidateSolution != nil {
		mmValidateSolution.inspectFuncValidateSolution(challenge, nonce)
	}

	mm_params := ProofOfWorkManagerMockValidateSolutionParams{challenge, nonce}

	// Record call args
	mmValidateSolution.ValidateSolutionMock.mutex.Lock()
	mmValidateSolution.ValidateSolutionMock.callArgs = append(mmValidateSolution.ValidateSolutionMock.callArgs, &mm_params)
	mmValidateSolution.ValidateSolutionMock.mutex.Unlock()

	for _, e := range mmValidateSolution.ValidateSolutionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmValidateSolution.ValidateSolutionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateSolution.ValidateSolutionMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateSolution.ValidateSolutionMock.defaultExpectation.params
		mm_want_ptrs := mmValidateSolution.ValidateSolutionMock.defaultExpectation.paramPtrs

		mm_got := ProofOfWorkManagerMockValidateSolutionParams{challenge, nonce}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.challenge != nil && !minimock.Equal(*mm_want_ptrs.challenge, mm_got.challenge) {
				mmValidateSolution.t.Errorf("ProofOfWorkManagerMock.ValidateSolution got unexpected parameter challenge, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateSolution.ValidateSolutionMock.defaultExpectation.expectationOrigins.originChallenge, *mm_want_ptrs.challenge, mm_got.challenge, minimock.Diff(*mm_want_ptrs.challenge, mm_got.challenge))
			}

			if mm_want_ptrs.nonce != nil && !minimock.Equal(*mm_want_ptrs.nonce, mm_got.nonce) {
				mmValidateSolution.t.Errorf("ProofOfWorkManagerMock.ValidateSolution got unexpected parameter nonce, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateSolution.ValidateSolutionMock.defaultExpectation.expectationOrigins.originNonce, *mm_want_ptrs.nonce, mm_got.nonce, minimock.Diff(*mm_want_ptrs.nonce, mm_got.nonce))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateSolution.t.Errorf("ProofOfWorkManagerMock.ValidateSolution got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateSolution.ValidateSolutionMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateSolution.ValidateSolutionMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateSolution.t.Fatal("No results are set for the ProofOfWorkManagerMock.ValidateSolution")
		}
		return (*mm_results).b1
	}
	if mmValidateSolution.funcValidateSolution != nil {
		return mmValidateSolution.funcValidateSolution(challenge, nonce)
	}
	mmValidateSolution.t.Fatalf("Unexpected call to ProofOfWorkManagerMock.ValidateSolution. %v %v", challenge, nonce)
	return
}

// ValidateSolutionAfterCounter returns a count of finished ProofOfWorkManagerMock.ValidateSolution invocations
func (mmValidateSolution *ProofOfWorkManagerMock) ValidateSolutionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateSolution.afterValidateSolutionCounter)
}

// ValidateSolutionBeforeCounter returns a count of ProofOfWorkManagerMock.ValidateSolution invocations
func (mmValidateSolution *ProofOfWorkManagerMock) ValidateSolutionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateSolution.beforeValidateSolutionCounter)
}

// Calls returns a list of arguments used in each call to ProofOfWorkManagerMock.ValidateSolution.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateSolution *mProofOfWorkManagerMockValidateSolution) Calls() []*ProofOfWorkManagerMockValidateSolutionParams {
	mmValidateSolution.mutex.RLock()

	argCopy := make([]*ProofOfWorkManagerMockValidateSolutionParams, len(mmValidateSolution.callArgs))
	copy(argCopy, mmValidateSolution.callArgs)

	mmValidateSolution.mutex.RUnlock()

	return argCopy
}

// MinimockValidateSolutionDone returns true if the count of the ValidateSolution invocations corresponds
// the number of defined expectations
func (m *ProofOfWorkManagerMock) MinimockValidateSolutionDone() bool {
	if m.ValidateSolutionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateSolutionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateSolutionMock.invocationsDone()
}

// MinimockValidateSolutionInspect logs each unmet expectation
func (m *ProofOfWorkManagerMock) MinimockValidateSolutionInspect() {
	for _, e := range m.ValidateSolutionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProofOfWorkManagerMock.ValidateSolution at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateSolutionCounter := mm_atomic.LoadUint64(&m.afterValidateSolutionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateSolutionMock.defaultExpectation != nil && afterValidateSolutionCounter < 1 {
		if m.ValidateSolutionMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProofOfWorkManagerMock.ValidateSolution at\n%s", m.ValidateSolutionMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProofOfWorkManagerMock.ValidateSolution at\n%s with params: %#v", m.ValidateSolutionMock.defaultExpectation.expectationOrigins.origin, *m.ValidateSolutionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateSolution != nil && afterValidateSolutionCounter < 1 {
		m.t.Errorf("Expected call to ProofOfWorkManagerMock.ValidateSolution at\n%s", m.funcValidateSolutionOrigin)
	}

	if !m.ValidateSolutionMock.invocationsDone() && afterValidateSolutionCounter > 0 {
		m.t.Errorf("Expected %d calls to ProofOfWorkManagerMock.ValidateSolution at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateSolutionMock.expectedInvocations), m.ValidateSolutionMock.expectedInvocationsOrigin, afterValidateSolutionCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProofOfWorkManagerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateChallengeInspect()

			m.MinimockValidateSolutionInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProofOfWorkManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProofOfWorkManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateChallengeDone() &&
		m.MinimockValidateSolutionDone()
}
