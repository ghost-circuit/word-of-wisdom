syntax = "proto3";

package wisdom;

import "google/protobuf/empty.proto";

option go_package = "github.com/alisher-baizhumanov/word-of-wisdom/pkg/generated/wisdom";

// WordOfWisdomService implements a challenge-response protocol where the server dynamically
// provides a challenge, and the client must solve it to get the word of wisdom.
service WordOfWisdomService {
  // Request a challenge that the client must solve.
  rpc GetChallenge (google.protobuf.Empty) returns (ChallengeResponse);

  // Submit a solution to the given challenge.
  rpc SubmitSolution (SolutionRequest) returns (SolutionResponse);
}

// Response containing the challenge and the difficulty level set by the server.
message ChallengeResponse {
  bytes challenge = 1;   // The challenge generated by the server.
  uint32 difficulty = 2; // The difficulty level determined by the server.
}

// Request to submit a solution for a given challenge.
message SolutionRequest {
  bytes challenge = 1;  // The challenge provided by the server.
  bytes solution = 2;   // The solution to the challenge.
}

// Response containing the word of wisdom if the solution is correct.
message SolutionResponse {
  Quote quote = 1;   // The word of wisdom (only provided if the solution is valid).
}

// Wisdom contains a quote and the author of the quote.
message Quote {
  string text = 1; // The quote.
  string author = 2; // The author of the quote.
  int64 id = 3; // The id of the quote.
}